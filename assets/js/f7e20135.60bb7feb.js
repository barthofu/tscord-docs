"use strict";(self.webpackChunktscord_docs=self.webpackChunktscord_docs||[]).push([[6075],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>g});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=d(a),g=r,c=m["".concat(s,".").concat(g)]||m[g]||u[g]||l;return a?n.createElement(c,o(o({ref:t},p),{},{components:a})):n.createElement(c,o({ref:t},p))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var d=2;d<l;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},85162:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(67294),r=a(86010);const l="tabItem_Ymn6";function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:a},t)}},65488:(e,t,a)=>{a.d(t,{Z:()=>g});var n=a(87462),r=a(67294),l=a(86010),o=a(72389),i=a(67392),s=a(7094),d=a(12466);const p="tabList__CuJ",u="tabItem_LNqP";function m(e){var t;const{lazy:a,block:o,defaultValue:m,values:g,groupId:c,className:k}=e,N=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=g??N.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),f=(0,i.l)(h,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===m?m:m??(null==(t=N.find((e=>e.props.default)))?void 0:t.props.value)??N[0].props.value;if(null!==b&&!h.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:y}=(0,s.U)(),[w,T]=(0,r.useState)(b),C=[],{blockElementScrollPositionUntilNextRender:O}=(0,d.o5)();if(null!=c){const e=v[c];null!=e&&e!==w&&h.some((t=>t.value===e))&&T(e)}const D=e=>{const t=e.currentTarget,a=C.indexOf(t),n=h[a].value;n!==w&&(O(t),T(n),null!=c&&y(c,String(n)))},E=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{const t=C.indexOf(e.currentTarget)+1;a=C[t]??C[0];break}case"ArrowLeft":{const t=C.indexOf(e.currentTarget)-1;a=C[t]??C[C.length-1];break}}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":o},k)},h.map((e=>{let{value:t,label:a,attributes:o}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>C.push(e),onKeyDown:E,onFocus:D,onClick:D},o,{className:(0,l.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":w===t})}),a??t)}))),a?(0,r.cloneElement)(N.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},N.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function g(e){const t=(0,o.Z)();return r.createElement(m,(0,n.Z)({key:String(t)},e))}},11494:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=a(87462),r=(a(67294),a(3905)),l=a(65488);a(85162);const o={sidebar_position:80},i="Logger",s={unversionedId:"bot/features/logger",id:"version-2.4/bot/features/logger",title:"Logger",description:'TSCord includes a logger service that lets you efficiently log things towards different "locations" in a formatted way.',source:"@site/versioned_docs/version-2.4/bot/features/logger.mdx",sourceDirName:"bot/features",slug:"/bot/features/logger",permalink:"/docs/bot/features/logger",draft:!1,editUrl:"https://github.com/barthofu/tscord-docs/tree/main/versioned_docs/version-2.4/bot/features/logger.mdx",tags:[],version:"2.4",sidebarPosition:80,frontMatter:{sidebar_position:80},sidebar:"tutorialSidebar",previous:{title:"Stats",permalink:"/docs/bot/features/stats"},next:{title:"Error Handler",permalink:"/docs/bot/features/error-handler"}},d={},p=[{value:"Configuration",id:"configuration",level:2},{value:"Usage",id:"usage",level:2},{value:"Log",id:"log",level:3},{value:"Per location methods",id:"per-location-methods",level:3},{value:"Auto-archiving",id:"auto-archiving",level:2},{value:"Retention policy",id:"retention-policy",level:3}],u=(m="Tab",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var m;const g={toc:p};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"logger"},"Logger"),(0,r.kt)("p",null,'TSCord includes a logger service that lets you efficiently log things towards different "locations" in a formatted way.'),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"To configure what should be logged and where, ",(0,r.kt)("a",{parentName:"p",href:"/docs/bot/get-started/configuration#logs"},"head over to this part of the documentation"),"."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("h3",{id:"log"},"Log"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"log()")," method of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Logger")," service is a little abstraction of the per location methods (listed just below) that will act as a shortcut to log to the console, and optionally to a file or a discord channel depending on params. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Params")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"message")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"The message to log")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"level")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"info")),(0,r.kt)("td",{parentName:"tr",align:null},"info ","|"," warn ","|"," error")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"saveToFile")),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"If the message should be saved in a file")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channelId")),(0,r.kt)("td",{parentName:"tr",align:null},"string ","|"," null"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},"Discord channel to log to (if ",(0,r.kt)("inlineCode",{parentName:"td"},"null"),", nothing will be logged to Discord)")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Usage")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Logger } from '@/services'\nconst logger = container.resolve(Logger)\n\nlogger.log('hello world!')\n")),(0,r.kt)("h3",{id:"per-location-methods"},"Per location methods"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(u,{label:"Console",value:"console",mdxType:"Tab"},(0,r.kt)("p",null,"Log a message in the console using the ",(0,r.kt)("inlineCode",{parentName:"p"},"console()")," method."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Params")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"message")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"The message to log")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"level")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"info")),(0,r.kt)("td",{parentName:"tr",align:null},"info ","|"," warn ","|"," error")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ignoreTemplate")),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"If it should ignore the default timestamp-based template")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Usage")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Logger } from '@/services'\nconst logger = container.resolve(Logger)\n\nlogger.console('hello world!')\n"))),(0,r.kt)(u,{label:"File",value:"file",mdxType:"Tab"},(0,r.kt)("p",null,"Log a message in a log file using the ",(0,r.kt)("inlineCode",{parentName:"p"},"file()")," method."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Params")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"message")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"The message to log")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"level")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"info")),(0,r.kt)("td",{parentName:"tr",align:null},"info ","|"," warn ","|"," error")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Usage")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Logger } from '@/services'\nconst logger = container.resolve(Logger)\n\nlogger.file('Hello world!', 'error') // -> will log it in {logFilesPath}/error.log\n"))),(0,r.kt)(u,{label:"Discord",value:"discord",mdxType:"Tab"},(0,r.kt)("p",null,"Log a message in a Discord channel with embeds using the ",(0,r.kt)("inlineCode",{parentName:"p"},"discord()")," method."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Params")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channelId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the discord channel to log to")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"message")),(0,r.kt)("td",{parentName:"tr",align:null},"string ","|"," ",(0,r.kt)("a",{parentName:"td",href:"https://discord.js.org/#/docs/discord.js/main/typedef/BaseMessageOptions"},"MessageOptions")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Either the message to log or directly an embed or anything that can be sent to discord")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"level")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"info")),(0,r.kt)("td",{parentName:"tr",align:null},"info ","|"," warn ","|"," error")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Usage")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Logger } from '@/services'\nconst logger = container.resolve(Logger)\n\nlogger.discord('716641518714355722', 'Hello world!', 'error')\n")))),(0,r.kt)("h2",{id:"auto-archiving"},"Auto-archiving"),(0,r.kt)("p",null,"TSCord will automatically archive the logs every day at midnight. The logs will be moved to a folder named ",(0,r.kt)("inlineCode",{parentName:"p"},"archive")," in the logs directory, and will be named ",(0,r.kt)("inlineCode",{parentName:"p"},"logs-{date}.tar.gz")," (",(0,r.kt)("inlineCode",{parentName:"p"},"gzip")," format) where ",(0,r.kt)("inlineCode",{parentName:"p"},"{date}")," is the date of the logs that were archived. "),(0,r.kt)("p",null,"You can disable this feature by setting ",(0,r.kt)("inlineCode",{parentName:"p"},"archive.enabled")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"logs")," configuration."),(0,r.kt)("h3",{id:"retention-policy"},"Retention policy"),(0,r.kt)("p",null,"The logs will be kept for a certain amount of days, and the rest will be deleted. You can configure this by setting ",(0,r.kt)("inlineCode",{parentName:"p"},"archive.retention")," to the amount of days you want to keep the logs. By default, it's set to 30 days."))}c.isMDXComponent=!0}}]);