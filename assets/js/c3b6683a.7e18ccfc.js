"use strict";(self.webpackChunktscord_docs=self.webpackChunktscord_docs||[]).push([[4269],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),g=a,f=u["".concat(s,".").concat(g)]||u[g]||p[g]||r;return n?o.createElement(f,i(i({ref:t},d),{},{components:n})):o.createElement(f,i({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},66429:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=n(87462),a=(n(67294),n(3905));const r={sidebar_position:2},i="Configuration",l={unversionedId:"bot/get-started/configuration",id:"version-2.0/bot/get-started/configuration",title:"Configuration",description:"Env",source:"@site/versioned_docs/version-2.0/bot/get-started/configuration.mdx",sourceDirName:"bot/get-started",slug:"/bot/get-started/configuration",permalink:"/docs/2.0/bot/get-started/configuration",draft:!1,editUrl:"https://github.com/barthofu/tscord-docs/tree/main/versioned_docs/version-2.0/bot/get-started/configuration.mdx",tags:[],version:"2.0",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/docs/2.0/bot/get-started/installation"},next:{title:"Usage",permalink:"/docs/2.0/bot/get-started/usage"}},s={},c=[{value:"Env",id:"env",level:2},{value:"Configs",id:"configs",level:2},{value:"General",id:"general",level:3},{value:"Database",id:"database",level:3},{value:"Logs",id:"logs",level:3},{value:"Stats",id:"stats",level:3},{value:"API",id:"api",level:3},{value:"WebSocket",id:"websocket",level:3}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"configuration"},"Configuration"),(0,a.kt)("h2",{id:"env"},"Env"),(0,a.kt)("p",null,"The first thing you have to do after installing the template is to setup the environments variables.\nTSCord supports ",(0,a.kt)("inlineCode",{parentName:"p"},".env")," files out-of-the-box."),(0,a.kt)("p",null,"You'll find a ",(0,a.kt)("inlineCode",{parentName:"p"},".env.example")," file in the root directory with the following key/values pairs under the discord category:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Key"),(0,a.kt)("th",{parentName:"tr",align:null},"Value"),(0,a.kt)("th",{parentName:"tr",align:null},"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"BOT_TOKEN")),(0,a.kt)("td",{parentName:"tr",align:null},"Your discord bot token (can be found ",(0,a.kt)("a",{parentName:"td",href:"https://discord.com/developers/applications"},"here"),")"),(0,a.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"TEST_GUILD_ID")),(0,a.kt)("td",{parentName:"tr",align:null},"The ID of the guild where you'll make tests with your bot"),(0,a.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"BOT_OWNER_ID")),(0,a.kt)("td",{parentName:"tr",align:null},"The discord ID of bot owner"),(0,a.kt)("td",{parentName:"tr",align:null},"\u2714")))),(0,a.kt)("p",null,"Once you have filled up the required values, rename the file from ",(0,a.kt)("inlineCode",{parentName:"p"},".env.example")," to ",(0,a.kt)("inlineCode",{parentName:"p"},".env"),"."),(0,a.kt)("h2",{id:"configs"},"Configs"),(0,a.kt)("p",null,"Nearly all the configuration of the bot lives in the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/config/")," folder.\nIt is then splitted in separated files by concern."),(0,a.kt)("h3",{id:"general"},"General"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=src/config/general.ts",title:"src/config/general.ts"},"export const generalConfig = {\n\n    // do not touch that\n    __templateVersion: 'x.x.x',\n\n    name: 'tscord', // the name of your bot\n    description: '', // the description of your bot\n    defaultLocale: 'en', // default language of the bot, must be a valid locale\n    simpleCommandsPrefix: '!', // default prefix for simple command messages (old way to do commands on discord)\n    owner: process.env['BOT_OWNER_ID'] || '',\n    timezone: 'Europe/Paris', // default TimeZone to well format and localize dates (logs, stats, etc)\n    \n    // useful links\n    links: {\n        invite: 'https://www.change_invite_link_here.com',\n        supportServer: 'https://discord.com/your_invitation_link',\n        gitRemoteRepo: 'https://github.com/barthofu/tscord',\n    },\n    \n    automaticUploadImagesToImgur: false, // enable or not the automatic assets upload\n\n    devs: [], // discord IDs of the devs that are working on the bot (you don't have to put the owner's id here)\n\n    eval: {\n        name: 'bot', // name to trigger the eval command\n        onlyOwner: false // restrict the eval command to the owner only (if not, all the devs can trigger it)\n    },\n\n    // define the bot activities (phrases under its name). Types can be: PLAYING, LISTENING, WATCHING, STREAMING\n    activities: [\n        {\n            text: 'discord.js v13',\n            type: 'PLAYING'\n        },\n        {\n            text: 'some knowledge',\n            type: 'STREAMING'\n        }\n    ]\n}\n\n// global colors\nexport const colorsConfig = {\n\n    primary: '#2F3136'\n}\n")),(0,a.kt)("h3",{id:"database"},"Database"),(0,a.kt)("p",null,"For more info about the Mikro-ORM config (which holds, for instance, the database connection information), head ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/docs/bot/features/database/orm"},"over here")),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=src/config/database.ts\xb2",title:"src/config/database.ts\xb2"},"export const databaseConfig: DatabaseConfigType = {\n    \n    path: './database/', // path to the folder containing the migrations and SQLite database (if used)\n    \n    // config for setting up an automated backup of the database (ONLY FOR SQLITE)\n    backup: {\n        enabled: false,\n        path: '' // path to the backups folder (should be in the database/ folder)\n    }\n}\n")),(0,a.kt)("h3",{id:"logs"},"Logs"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=src/config/logs.ts",title:"src/config/logs.ts"},"export const logsConfig: LogsConfigType = {\n\n    debug: false, // set the discordx client debug logs\n        \n    // for each type of log, you can precise :\n    // - if the log should be consoled\n    // - if the log should be saved to the log files\n    // - if the log should be sent to a discord channel (providing its IP)\n    \n    interaction: {\n        file: true,\n        console: true,\n        channel: null,\n\n        // exclude some interactions types\n        exclude: [\n            'BUTTON_INTERACTION', \n            'SELECT_MENU_INTERACTION'\n        ]\n    },\n\n    simpleCommand: {\n        file: true,\n        console: true,\n        channel: null\n    },\n\n    newUser: {\n        file: true,\n        console: true,\n        channel: null\n    },\n    \n    guild: {\n        file: true,\n        console: true,\n        channel: null\n    },\n    \n    error: {\n        file: true,\n        console: true,\n        channel: null\n    }\n}\n")),(0,a.kt)("h3",{id:"stats"},"Stats"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=src/config/stats.ts",title:"src/config/stats.ts"},"export const statsConfig: StatsConfigType = {\n\n    interaction: {\n\n        // exclude interaction types from being recorded as stat\n        exclude: [\n            'BUTTON_INTERACTION',\n            'SELECT_MENU_INTERACTION'\n        ]\n    }\n}\n")),(0,a.kt)("h3",{id:"api"},"API"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=src/config/api.ts",title:"src/config/api.ts"},"export const apiConfig: APIConfigType = {\n\n    enabled: false, // is the API server enabled or not\n    port: process.env['API_PORT'] ? parseInt(process.env['API_PORT']) : 4000, // the port on which the API server should be exposed\n}\n")),(0,a.kt)("h3",{id:"websocket"},"WebSocket"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=src/config/websocket.ts",title:"src/config/websocket.ts"},"export const websocketConfig: WebsocketConfigType = {\n\n    enabled: false, // should the websocket client be enabled or not (if you're not using the Dashboard, just disable it)\n}\n")))}p.isMDXComponent=!0}}]);