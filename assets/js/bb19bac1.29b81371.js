"use strict";(self.webpackChunktscord_docs=self.webpackChunktscord_docs||[]).push([[1900],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),c=a,f=m["".concat(s,".").concat(c)]||m[c]||d[c]||r;return n?i.createElement(f,o(o({ref:t},u),{},{components:n})):i.createElement(f,o({ref:t},u))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},56883:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var i=n(87462),a=(n(67294),n(3905));const r={sidebar_position:20},o="Create a plugin",l={unversionedId:"plugins/create",id:"version-2.3/plugins/create",title:"Create a plugin",description:"Introduction",source:"@site/versioned_docs/version-2.3/plugins/create.mdx",sourceDirName:"plugins",slug:"/plugins/create",permalink:"/docs/2.3/plugins/create",draft:!1,editUrl:"https://github.com/barthofu/tscord-docs/tree/main/versioned_docs/version-2.3/plugins/create.mdx",tags:[],version:"2.3",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"tutorialSidebar",previous:{title:"Usage",permalink:"/docs/2.3/plugins/usage"},next:{title:"Publish",permalink:"/docs/2.3/plugins/publish"}},s={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Structure",id:"structure",level:2},{value:"<code>plugin.json</code>",id:"pluginjson",level:3},{value:"<code>main.ts</code>",id:"maints",level:3},{value:"Development workflow",id:"development-workflow",level:2},{value:"Differences",id:"differences",level:2},{value:"Translations",id:"translations",level:3},{value:"Inner imports",id:"inner-imports",level:3}],u={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"create-a-plugin"},"Create a plugin"),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"Plugin management has been designed so that if you know how to use the template, you basically know how to make plugins."),(0,a.kt)("p",null,"In fact, the structure of a plugin is virtually the same as that of the template, so you can easily take a Command, Service or Event and simply copy/paste it into a plugin to make it work."),(0,a.kt)("p",null,"Take a look at the various plugins already in use on our repository: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/barthofu/tscord-plugins"},"https://github.com/barthofu/tscord-plugins")),(0,a.kt)("h2",{id:"structure"},"Structure"),(0,a.kt)("p",null,"The structure of a plugin is very similar to that of the ",(0,a.kt)("inlineCode",{parentName:"p"},"src")," folder of the template:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"plugin-name/\n\u251c\u2500\u2500 <module>/\n\u2502   \u2514\u2500\u2500 my-file.ts\n\u251c\u2500\u2500 plugin.json \n\u251c\u2500\u2500 README.md # recommanded\n\u2514\u2500\u2500 main.ts # optional\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"<module>")," folder can be any of the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"commands")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"events")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"services")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"i18n")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"api")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"guards")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"utils"))),(0,a.kt)("p",null,"e.g: A simple example of a plugin that only adds a command, a service and some translations in ",(0,a.kt)("inlineCode",{parentName:"p"},"en")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"fr"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"my-plugin/\n\u251c\u2500\u2500 commands/\n\u2502   \u2514\u2500\u2500 my-command.ts\n\u251c\u2500\u2500 services/\n\u2502   \u2514\u2500\u2500 my-service.ts\n\u251c\u2500\u2500 i18n/\n\u2502   \u251c\u2500\u2500 en.ts\n\u2502   \u2514\u2500\u2500 fr.ts\n\u2514\u2500\u2500 plugin.json\n")),(0,a.kt)("h3",{id:"pluginjson"},(0,a.kt)("inlineCode",{parentName:"h3"},"plugin.json")),(0,a.kt)("p",null,"Every plugin require a ",(0,a.kt)("inlineCode",{parentName:"p"},"plugin.json")," file at the root of the plugin folder. This file contains the following information:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "my-plugin",\n    "description": "A simple plugin",\n    "version": "1.0.0",\n    "author": "John Doe",\n    "tscordRequiredVersion": ">=1.0.0"\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"name"),": Name of your plugin, can only contain letters, numbers and dashes. It should be in lowercase."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"description")," (",(0,a.kt)("em",{parentName:"li"},"optional"),"): A short description of your plugin."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"version"),": The version of your plugin."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"author")," (",(0,a.kt)("em",{parentName:"li"},"optional"),"): The author of the plugin."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tscordRequiredVersion"),": A ",(0,a.kt)("a",{parentName:"li",href:"https://semver.org/"},"SemVer")," to validate the use of your plugin on certain template versions.")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"If this file is missing, the plugin won't be loaded into the template.")),(0,a.kt)("h3",{id:"maints"},(0,a.kt)("inlineCode",{parentName:"h3"},"main.ts")),(0,a.kt)("p",null,"You can use a file named ",(0,a.kt)("inlineCode",{parentName:"p"},"main.ts")," at the root of your project if you need to perform tasks at bot startup."),(0,a.kt)("p",null,"Note that when you run this file, all the rest of your plugin is already loaded, such as your Services, Commands, Events, etc..."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"A plugin can't edit the ",(0,a.kt)("inlineCode",{parentName:"p"},"client.ts")," config of the project, but you can use this file (",(0,a.kt)("inlineCode",{parentName:"p"},"main.ts"),") to verify if all the needed ",(0,a.kt)("strong",{parentName:"p"},"intents")," and/or ",(0,a.kt)("strong",{parentName:"p"},"partials")," are enabled.")),(0,a.kt)("h2",{id:"development-workflow"},"Development workflow"),(0,a.kt)("p",null,"To develop a plugin, you can simply create a new folder in the ",(0,a.kt)("inlineCode",{parentName:"p"},"plugins")," folder of a fresh TSCord project and start coding. "),(0,a.kt)("h2",{id:"differences"},"Differences"),(0,a.kt)("p",null,"There are still a few differences to bear in mind when creating a plugin vs developing a bot in the template, notably when it comes to managing translations."),(0,a.kt)("h3",{id:"translations"},"Translations"),(0,a.kt)("p",null,"For translations, you only need to create a file such as ",(0,a.kt)("inlineCode",{parentName:"p"},"en.ts")," and put the desired translation in it, instead of a folder as you do usually in the template. "),(0,a.kt)("p",null,"By default, English is mandatory, but it's highly recommended to add as many languages as possible to your plugins if you intend to share them."),(0,a.kt)("p",null,"But don't worry, if a translation is missing, the end user can rewrite the translations without having to modify the plugin."),(0,a.kt)("h3",{id:"inner-imports"},"Inner imports"),(0,a.kt)("p",null,"When you import files within your plugin, you should use the relative path, not the global module path. For example, if you want to import a service in a command, you should use the following syntax:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { MyService } from '../services'\n")),(0,a.kt)("p",null,"It ensures that your plugin will work even if the folder name changes."))}d.isMDXComponent=!0}}]);