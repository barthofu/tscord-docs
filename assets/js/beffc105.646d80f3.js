"use strict";(self.webpackChunktscord_docs=self.webpackChunktscord_docs||[]).push([[8406],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=p(a),m=r,f=c["".concat(s,".").concat(m)]||c[m]||u[m]||i;return a?n.createElement(f,l(l({ref:t},d),{},{components:a})):n.createElement(f,l({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},29043:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const i={sidebar_position:4},l="Single Data Type",o={unversionedId:"bot/features/database/single-data-type",id:"version-2.2/bot/features/database/single-data-type",title:"Single Data Type",description:"The Data entity is quite special as it is an implementation of the EAV pattern.",source:"@site/versioned_docs/version-2.2/bot/features/database/single-data-type.mdx",sourceDirName:"bot/features/database",slug:"/bot/features/database/single-data-type",permalink:"/docs/2.2/bot/features/database/single-data-type",draft:!1,editUrl:"https://github.com/barthofu/tscord-docs/tree/main/versioned_docs/version-2.2/bot/features/database/single-data-type.mdx",tags:[],version:"2.2",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Sync",permalink:"/docs/2.2/bot/features/database/sync"},next:{title:"Backups",permalink:"/docs/2.2/bot/features/database/backups"}},s={},p=[],d={toc:p};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"single-data-type"},"Single Data Type"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Data")," entity is quite special as it is an implementation of the ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Entity%E2%80%93attribute%E2%80%93value_model"},"EAV pattern"),"."),(0,r.kt)("p",null,"It permits to have key/value kind of data stored in an SQL database, which is not really possible by default."),(0,r.kt)("p",null,"These data and their initial values are stored in the ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultData")," variable in the ",(0,r.kt)("inlineCode",{parentName:"p"},"src/entities/Data.ts")," file, and you can add as much key/value as you want."),(0,r.kt)("p",null,"To interact with them, we've created a custom repository for the Data entity with very simple ",(0,r.kt)("inlineCode",{parentName:"p"},"set"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"get")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"update")," methods. All of these methods are strongly ",(0,r.kt)("strong",{parentName:"p"},"typed")," thanks to the infered types of the initial values."),(0,r.kt)("p",null,"Usage example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"@Discord()\n@injectable()\nexport default class PingCommand {\n\n    constructor(\n        private db: Database\n    ) {}\n\n    @Slash({ \n        name: 'ping' \n    })\n    async pingHandler() {\n\n        const dataRepo = this.db.get(Data)\n\n        const isInMaintenance = dataRepo.get('maintenance') // -> false\n\n        await dataRepo.set('maintenance', true) // -> true\n\n        await dataRepo.update('maintenance', (currentValue) => !currentValue) // -> false\n\n        await dataRepo.set('maintenance', 'foo') // -> ERROR: Type 'string' is not assignable to type 'boolean'\n    }\n\n}\n")),(0,r.kt)("p",null,"Here are the built-in key/value data:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default value"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"maintenance")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"Actual maintenance state of the bot")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"lastMaintenance")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"Date")),(0,r.kt)("td",{parentName:"tr",align:null},"Date.now()"),(0,r.kt)("td",{parentName:"tr",align:null},"Timestamp of the last maintenance")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"lastStartup")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"Date")),(0,r.kt)("td",{parentName:"tr",align:null},"Date.now()"),(0,r.kt)("td",{parentName:"tr",align:null},"Timestamp of the last startup of the bot")))))}u.isMDXComponent=!0}}]);